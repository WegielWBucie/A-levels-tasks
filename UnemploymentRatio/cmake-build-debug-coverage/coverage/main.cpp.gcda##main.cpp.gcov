        -:    0:Source:C:/Users/pondr/Desktop/C++/UnemploymentRatio/main.cpp
        -:    0:Graph:C:\Users\pondr\Desktop\C++\UnemploymentRatio\cmake-build-debug-coverage\CMakeFiles\UnemploymentRatio.dir\main.cpp.gcno
        -:    0:Data:C:\Users\pondr\Desktop\C++\UnemploymentRatio\cmake-build-debug-coverage\CMakeFiles\UnemploymentRatio.dir\main.cpp.gcda
        -:    0:Runs:1
        -:    1:#include <iostream>
        -:    2:#include <cmath>
        -:    3:#include "AnnualUnemployment.cpp"
        -:    4:#include <ctime>
        -:    5:
        -:    6:using namespace std;
        -:    7:
function _Z5powerii called 4 returned 100% blocks executed 86%
        4:    8:int power(int value, int power) {
        -:    9:
        4:   10:    int startValue = value;
        4:   11:    if(power == 0) {
        4:   11-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####:   12:        return 1;
    %%%%%:   12-block  0
        -:   13:    }
        8:   14:    for(int i=1; i<power; i++) {
        4:   14-block  0
        8:   14-block  1
branch  0 taken 4
branch  1 taken 4 (fallthrough)
        4:   15:        value *= startValue;
        4:   15-block  0
        -:   16:    }
        4:   17:    return value;
        4:   17-block  0
        -:   18:}
        -:   19:
function _Z7roundTofi called 2 returned 100% blocks executed 100%
        2:   20:float roundTo(float value, int decimalPlaces) {
        2:   21:    return round(value * power(10, decimalPlaces)) / power(10, decimalPlaces);
        2:   21-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
        -:   22:}
        -:   23:
        -:   24:
function main called 1 returned 100% blocks executed 84%
        1:   25:int main() {
        -:   26:
        1:   27:    auto startTime = clock();
        1:   27-block  0
call    0 returned 1
        -:   28:
        1:   29:    map<int, AnnualUnemployment>annualUnemployment;
call    0 returned 1
        1:   30:    AnnualUnemployment::inputAnnualUnemplomentRatios(annualUnemployment);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   31:
        1:   32:    AnnualUnemployment::showAnnualUnemployment(annualUnemployment);
        1:   32-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   33:
        1:   34:    float maxAverageRatio = 0, minAverageRatio = 100, averageAnnualRatio;
        -:   35:    int yearOfMin, yearOfMax;
        1:   36:    int dangerMonthsCounter = 0;
       71:   37:    for(auto pair : annualUnemployment) {
        1:   37-block  0
call    0 returned 1
call    1 returned 1
       70:   37-block  1
call    2 returned 70
call    3 returned 70
branch  4 taken 70 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 70
       71:   37-block  2
call    7 returned 71
branch  8 taken 70
branch  9 taken 1 (fallthrough)
       70:   38:        averageAnnualRatio = 0;
      910:   39:        for(auto value : pair.second.getFactors()) {
       70:   39-block  0
call    0 returned 70
branch  1 taken 70 (fallthrough)
branch  2 taken 0 (throw)
       70:   39-block  1
call    3 returned 70
call    4 returned 70
      840:   39-block  2
call    5 returned 840
      840:   39-block  3
call    6 returned 840
      910:   39-block  4
call    7 returned 910
branch  8 taken 840
branch  9 taken 70 (fallthrough)
      840:   40:            averageAnnualRatio += value;
      840:   41:            if(value > 10) {
branch  0 taken 42 (fallthrough)
branch  1 taken 798
       42:   42:                dangerMonthsCounter++;
       42:   42-block  0
        -:   43:            }
       70:   44:        }
       70:   44-block  0
call    0 returned 70
       70:   45:        averageAnnualRatio /= 12;
       70:   46:        if(averageAnnualRatio > maxAverageRatio) {
branch  0 taken 6 (fallthrough)
branch  1 taken 64
        6:   47:            maxAverageRatio = averageAnnualRatio;
        6:   48:            yearOfMax = pair.first;
        6:   48-block  0
        -:   49:        }
       70:   50:        if(averageAnnualRatio < minAverageRatio) {
       70:   50-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 67
        3:   51:            minAverageRatio = averageAnnualRatio;
        3:   52:            yearOfMin = pair.first;
        3:   52-block  0
        -:   53:        }
       70:   54:    }
       70:   54-block  0
call    0 returned 70
    $$$$$:   54-block  1
call    1 never executed
        1:   55:    cout << "a) " << dangerMonthsCounter << endl;
        1:   55-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   55-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   55-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        -:   56:
        1:   57:    cout << "b) " << endl;
        1:   57-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   57-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   58:    cout << yearOfMax << "\t" << roundTo(maxAverageRatio, 2) << endl;
        1:   58-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   58-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   58-block  2
call    6 returned 1
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
        1:   58-block  3
call   10 returned 1
branch 11 taken 1 (fallthrough)
branch 12 taken 0 (throw)
        1:   59:    cout << yearOfMin << "\t" <<  roundTo(minAverageRatio, 2) << endl;
        1:   59-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   59-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   59-block  2
call    6 returned 1
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
        1:   59-block  3
call   10 returned 1
branch 11 taken 1 (fallthrough)
branch 12 taken 0 (throw)
        -:   60:
        1:   61:    cout << "c) " << endl;
        1:   61-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   61-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   62:    cout << "Year" << "\tMIN" << "\tMAX" << endl;
        1:   62-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   62-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   62-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:   62-block  3
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        -:   63:    float currentMax, currentMin;
       71:   64:    for(auto pair : annualUnemployment) {
        1:   64-block  0
call    0 returned 1
call    1 returned 1
       70:   64-block  1
call    2 returned 70
call    3 returned 70
branch  4 taken 70 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 70
       71:   64-block  2
call    7 returned 71
branch  8 taken 70
branch  9 taken 1 (fallthrough)
        -:   65:
       70:   66:        currentMax = 0;
       70:   67:        currentMin = 1000;
      910:   68:        for(auto value : pair.second.getFactors()) {
       70:   68-block  0
call    0 returned 70
branch  1 taken 70 (fallthrough)
branch  2 taken 0 (throw)
       70:   68-block  1
call    3 returned 70
call    4 returned 70
      840:   68-block  2
call    5 returned 840
      840:   68-block  3
call    6 returned 840
      910:   68-block  4
call    7 returned 910
branch  8 taken 840
branch  9 taken 70 (fallthrough)
      840:   69:            if(value > currentMax) {
branch  0 taken 238 (fallthrough)
branch  1 taken 602
      238:   70:                currentMax = value;
      238:   70-block  0
        -:   71:            }
      840:   72:            if(value < currentMin) {
      840:   72-block  0
branch  0 taken 90 (fallthrough)
branch  1 taken 750
       90:   73:                currentMin = value;
       90:   73-block  0
        -:   74:            }
       70:   75:        }
       70:   75-block  0
call    0 returned 70
       70:   76:        cout << pair.first << "\t" << currentMin << "\t" << currentMax << endl;
call    0 returned 70
branch  1 taken 70 (fallthrough)
branch  2 taken 0 (throw)
       70:   76-block  0
call    3 returned 70
branch  4 taken 70 (fallthrough)
branch  5 taken 0 (throw)
       70:   76-block  1
call    6 returned 70
branch  7 taken 70 (fallthrough)
branch  8 taken 0 (throw)
       70:   76-block  2
call    9 returned 70
branch 10 taken 70 (fallthrough)
branch 11 taken 0 (throw)
       70:   76-block  3
call   12 returned 70
branch 13 taken 70 (fallthrough)
branch 14 taken 0 (throw)
       70:   76-block  4
call   15 returned 70
branch 16 taken 70 (fallthrough)
branch 17 taken 0 (throw)
       70:   77:    }
       70:   77-block  0
call    0 returned 70
    $$$$$:   77-block  1
call    1 never executed
        -:   78:
        1:   79:    int sequenceLength = 0;
        -:   80:    // 0, not 1, because condition inside loop will be always true for the first transition,
        -:   81:    // (previous value is being set to 100, so every unemployment value will provide incrementation)
        -:   82:    // therefore sequence length will be immediately increased to 1
        1:   83:    int theBiggestLength = 0;
        1:   84:    float previousValue = 100;
        1:   85:    int *firstDate = new int[2]{1945,1};
        1:   85-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   86:    int *lastDate = new int[2];
        1:   86-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       71:   87:    for(auto pair : annualUnemployment) {
        1:   87-block  0
call    0 returned 1
call    1 returned 1
       70:   87-block  1
call    2 returned 70
call    3 returned 70
branch  4 taken 70 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 70
       71:   87-block  2
call    7 returned 71
branch  8 taken 70
branch  9 taken 1 (fallthrough)
        -:   88:
       70:   89:        if(pair.second.getFactors().at(0) <= previousValue) {
       70:   89-block  0
call    0 returned 70
branch  1 taken 70 (fallthrough)
branch  2 taken 0 (throw)
       70:   89-block  1
call    3 returned 70
branch  4 taken 70 (fallthrough)
branch  5 taken 0 (throw)
       70:   89-block  2
call    6 returned 70
branch  7 taken 56 (fallthrough)
branch  8 taken 14
    $$$$$:   89-block  3
call    9 never executed
    $$$$$:   89-block  4
       56:   90:            sequenceLength++;
       56:   90-block  0
        -:   91:        } else {
       14:   92:            if(sequenceLength > theBiggestLength) {
       14:   92-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 14
    #####:   93:                theBiggestLength = sequenceLength;
        -:   94:                // month & year
        -:   95:
    #####:   96:                lastDate[0] = 12;
    #####:   97:                lastDate[1] = pair.first - 1;
        -:   98:
    #####:   99:                firstDate[0] = (12 + (lastDate[0] - sequenceLength) + 1) % 12;
    #####:  100:                firstDate[1] = lastDate[1] - (sequenceLength - lastDate[0]) / 12 - 1;
    %%%%%:  100-block  0
        -:  101:
        -:  102:            }
       14:  103:            sequenceLength = 1;
       14:  103-block  0
        -:  104:        }
        -:  105:
      840:  106:        for(int i=1; i<pair.second.getFactors().size(); i++) {
       70:  106-block  0
      770:  106-block  1
      840:  106-block  2
call    0 returned 840
branch  1 taken 840 (fallthrough)
branch  2 taken 0 (throw)
      840:  106-block  3
call    3 returned 840
call    4 returned 840
branch  5 taken 770
branch  6 taken 70 (fallthrough)
      770:  107:            if(pair.second.getFactors()[i] <= pair.second.getFactors()[i-1]) {
      770:  107-block  0
call    0 returned 770
branch  1 taken 770 (fallthrough)
branch  2 taken 0 (throw)
      770:  107-block  1
call    3 returned 770
call    4 returned 770
branch  5 taken 770 (fallthrough)
branch  6 taken 0 (throw)
      770:  107-block  2
call    7 returned 770
call    8 returned 770
call    9 returned 770
branch 10 taken 451 (fallthrough)
branch 11 taken 319
    $$$$$:  107-block  3
call   12 never executed
    $$$$$:  107-block  4
      451:  108:                sequenceLength++;
      451:  108-block  0
        -:  109:            } else {
      319:  110:                if(sequenceLength > theBiggestLength) {
      319:  110-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 315
        4:  111:                    theBiggestLength = sequenceLength;
        4:  112:                    lastDate[1] = pair.first;
        4:  113:                    lastDate[0] = i - 1 + 1;
        -:  114:                                // -1 because I check previous month, +1 because months are 1-12
        -:  115:
        4:  116:                    firstDate[0] = (12 + (lastDate[0] - sequenceLength) + 1) % 12;
        4:  117:                    firstDate[1] = lastDate[1] - (sequenceLength - lastDate[0]) / 12 - 1;
        4:  117-block  0
        -:  118:                }
      319:  119:                sequenceLength = 1;
      319:  119-block  0
        -:  120:            }
        -:  121:        }
       70:  122:        previousValue = pair.second.getFactors().at(pair.second.getFactors().size() - 1);
       70:  122-block  0
call    0 returned 70
branch  1 taken 70 (fallthrough)
branch  2 taken 0 (throw)
       70:  122-block  1
call    3 returned 70
branch  4 taken 70 (fallthrough)
branch  5 taken 0 (throw)
       70:  122-block  2
call    6 returned 70
call    7 returned 70
branch  8 taken 70 (fallthrough)
branch  9 taken 0 (throw)
       70:  122-block  3
call   10 returned 70
call   11 returned 70
    $$$$$:  122-block  4
call   12 never executed
    $$$$$:  122-block  5
    $$$$$:  122-block  6
call   13 never executed
    $$$$$:  122-block  7
       70:  123:    }
call    0 returned 70
    $$$$$:  123-block  0
call    1 never executed
        1:  124:    cout << "d)\n";
        1:  124-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  125:    cout << "Month" << "\tYear" << endl;
        1:  125-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  125-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  125-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  126:    cout << firstDate[0] << "\t" << firstDate[1] << endl;
        1:  126-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  126-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  126-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  126-block  3
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:  127:    cout << lastDate[0] << "\t" << lastDate[1] << endl;
        1:  127-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  127-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  127-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  127-block  3
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:  128:    cout << "Length -> " << theBiggestLength << endl;
        1:  128-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  128-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  128-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  129:}
        1:  129-block  0
call    0 returned 1
        1:  129-block  1
    $$$$$:  129-block  2
call    1 never executed
